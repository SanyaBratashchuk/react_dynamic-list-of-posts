{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/posts.ts","App.tsx","index.tsx"],"names":["PostsList","posts","selectedPost","selectPost","className","map","post","userId","title","id","type","onClick","BASE_URL","NewCommentForm","React","memo","addComment","postId","useState","name","setName","email","setEmail","body","setBody","changeHandler","event","target","value","onSubmit","preventDefault","Math","trunc","Date","now","createdAt","placeholder","onChange","required","PostDetails","selectedPostId","details","setDetails","comments","setComments","commentsStatus","setCommentsStatus","loadDetails","fetch","then","response","json","loadedDetails","loadComments","loadedComments","useCallback","newComment","currComments","method","JSON","stringify","createComment","removeComment","commentId","filter","comment","deleteComment","useEffect","length","currCommentsStatus","App","setPosts","setSelectedPostId","loadPosts","getUserPosts","loadedPosts","Boolean","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4aa5d5e3.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  selectPost,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>{`[User #${post.userId}:]`}</b>\n            {post.title}\n          </div>\n          {selectedPost === post.id\n            ? (\n              <button\n                type=\"button\"\n                className=\"PostList__button button\"\n                onClick={() => selectPost(0)}\n              >\n                close\n              </button>\n            )\n            : (\n              <button\n                type=\"button\"\n                className=\"PostList__button button\"\n                onClick={() => {\n                  selectPost(post.id);\n                }}\n              >\n                open\n              </button>\n            )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\ninterface Props {\n  posts: Post[],\n  selectedPost: number,\n  selectPost: (postId: number) => void,\n}\n","export const BASE_URL = 'https://mate.academy/students-api';\n","/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { Comment } from '../../types/Comment';\n\nexport const NewCommentForm = React.memo<Props>(({ addComment, postId }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'email':\n        setEmail(value);\n        break;\n      case 'body':\n        setBody(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const reset = () => {\n    setBody('');\n    setName('');\n    setEmail('');\n  };\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    addComment({\n      id: Math.trunc(Date.now()),\n      name,\n      email,\n      body,\n      postId,\n      createdAt: new Date(),\n    });\n    reset();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={submitHandler}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={changeHandler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={changeHandler}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={body}\n          onChange={changeHandler}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\ninterface Props {\n  addComment: (newComment: Comment) => void,\n  postId: number,\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  createComment,\n  deleteComment,\n  getPostComments,\n  getPostDetails,\n} from '../../api/posts';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = React.memo<Props>(\n  ({ selectedPostId }) => {\n    const [details, setDetails] = useState<Post | null>(null);\n    const [comments, setComments] = useState<Comment[]>([]);\n    const [commentsStatus, setCommentsStatus] = useState(true);\n\n    const loadDetails = () => {\n      getPostDetails(selectedPostId).then(loadedDetails => setDetails(loadedDetails));\n    };\n\n    const loadComments = () => {\n      getPostComments(selectedPostId).then(loadedComments => setComments(loadedComments));\n    };\n\n    const addComment = useCallback((newComment: Comment) => {\n      setComments(currComments => [...currComments, newComment]);\n      createComment(newComment);\n    }, [comments]);\n\n    const displayComments = () => {\n      setCommentsStatus(currCommentsStatus => !currCommentsStatus);\n    };\n\n    const removeComment = (commentId: number) => {\n      setComments(comments.filter(comment => comment.id !== commentId));\n      deleteComment(commentId);\n    };\n\n    useEffect(() => {\n      loadComments();\n      loadDetails();\n    }, [selectedPostId]);\n\n    return (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{details?.body}</p>\n        </section>\n\n        <section className=\"PostDetails__comments\">\n          {comments.length > 0 && (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={displayComments}\n            >\n              {commentsStatus ? (\n                `Hide ${comments.length} comments`\n              )\n                : (\n                  `Show ${comments.length} comments`\n                )}\n            </button>\n          )}\n\n          {commentsStatus && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove--button button\"\n                    onClick={() => removeComment(comment.id)}\n                  >\n                    X\n                  </button>\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )}\n        </section>\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm addComment={addComment} postId={selectedPostId} />\n          </div>\n        </section>\n      </div>\n    );\n  },\n);\ninterface Props {\n  selectedPostId: number,\n}\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { BASE_URL } from './api';\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  if (!userId) {\n    return fetch(`${BASE_URL}/posts`).then(response => response.json());\n  }\n\n  return fetch(`${BASE_URL}/posts?userId=${userId}`).then(response => response.json());\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return fetch(`${BASE_URL}/posts/${postId}`).then(response => response.json());\n};\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return fetch(`${BASE_URL}/comments?postId=${postId}`).then(response => response.json());\n};\n\nexport const deleteComment = (commentId: number) => {\n  fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const createComment = (newComment: Comment) => {\n  fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n  });\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/Post';\nimport { getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectPost = useCallback((postId:number) => {\n    setSelectedPostId(postId);\n  }, [setSelectedPostId]);\n\n  const loadPosts = (userId:number) => {\n    getUserPosts(userId).then(loadedPosts => setPosts(loadedPosts));\n  };\n\n  useEffect(() => loadPosts(0), []);\n\n  const selectHandler = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    loadPosts(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={selectHandler}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectPost={selectPost}\n            selectedPost={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {Boolean(selectedPostId) && (<PostDetails selectedPostId={selectedPostId} />)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}